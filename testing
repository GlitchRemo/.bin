//---------------------------------------------- TESTING PROTOTYPE ------------------------------------------------------

function style(text, code) {
  return "\033[" + code + "m" + text + "\033[0m";
}

function redFg(text) {
  return style(text, 31);
}

function greenFg(text) {
  return style(text, 32);
}

function yellowFg(text) {
  return style(text, 33);
}

function bold(text) {
  return style(text, 1);
}

function underline(text) {
  return style(text, 4);
}

function printHeadline(text) {
  console.log(yellowFg(bold(underline(text))));
}

function isApproximatelySame(expected, actual, precision) {
  if(expected === actual) {
    return true;
  }

  return actual >= (expected - precision) && actual <= (expected + precision) ;
}

function isEqual(list1, list2) {
  if (list1.length === 0 && list2.length === 0) return true;

  if (list1.length !== list2.length) return false;

  if (list1[0] !== list2[0]) return false;

  return isEqual(list1.slice(1), list2.slice(1)); 
}

function generateSuccessMessage(message) {
  return "✅ " + message;
}

function generateFailureMessage(expected, actual, message) {
  const expectedValue = greenFg("\n\tExpected : \t" + expected);
  const actualValue = redFg("\n\tActual   : \t" + actual);

  return "❌ " + message + expectedValue + actualValue;
}

let passedAssertions = 0;
const getPassedAssertions = function() {
  return passedAssertions;
}

let totalAssertions = 0;
const getTotalAssertions = function() {
  return totalAssertions;
}

function showTestResult(isTestPassed, expected, actual, testName) {
  const successMessage = generateSuccessMessage(testName); 
  const failureMessage = generateFailureMessage(expected, actual, testName); 
  const message = isTestPassed ? successMessage : failureMessage;

  passedAssertions += isTestPassed;
  totalAssertions++;

  console.log(message);
}

const showTestSummary = function() {
  const passedAssertions = getPassedAssertions();
  const totalAssertions = getTotalAssertions();
  console.log("Summary : ", passedAssertions, "/", totalAssertions, "passed");
}

function assert(expected, actual, testName) {
  showTestResult(isApproximatelySame(actual, expected, 0.01), expected, actual, testName); 
}

function assertArrayEqual(expected, actual, testName) {
  showTestResult(isEqual(actual, expected), expected, actual, testName);
}

//----------------------------------------- USAGE PROTOYPE --------------------------------------------------- 

// When expected and actual are arrays

/* function runTestFunctionName() {
**   printHeadline("Running Tests For Function Name");
**   assertArrayEqual([ ], functionName([ 8, 2, 2, 4 ]), "Type of arguments given");
** }

** When expected and actual are of types other than array

** function runTestFunctionName() {
**   printHeadline("Running Tests For Function Name");
**   assert(true, functionName([ 8, 2, 2, 4 ]), "Type of arguments given");
** }
**
** showTestSummary();
*/

//------------------------------------------------------------------------------------------------------------- 
